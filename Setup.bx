class{

	static {
		projectRoot = server.cli.executionPath
	}

	function main(){
		// Copy the .env.example to .env if it doesn't exist
		if( !fileExists( ".env" ) ){
			println( "🥊 Creating .env file from .env.example" )
			fileCopy( ".env.example", ".env" )
		} else{
			println( "⏭️  .env file already exists, skipping creation." )
		}

		// Copy the copilot file if it doesn't exist
		if( !directoryExists( ".github" ) ){
			println( "🥊 Creating .github directory" )
			directoryCreate( ".github" )
		}
		if( !fileExists( ".github/copilot-instructions.md" ) ){
			println( "🥊 Creating copilot file" )
			fileCopy( "resources/copilot-instructions.md", ".github/copilot-instructions.md" )
		} else{
			println( "⏭️  .github/copilot-instructions.md file already exists, skipping creation." )
		}

		// Maven setup
		// Ask the user if they want to use Maven for Java dependency management
		var maven = CLIRead( "Do you want to use Maven for any Java dependency management? (y/n): " ).toLowerCase().booleanFormat();
		if( maven ){
			println( "🥊 Setting up a [pom.xml] in your root for Java dependency management" )
			println( "👉  You can add your Java dependencies to the [dependencies] section of the pom.xml" )
			println( "👉  They will be automatically copied to the [runtime/lib] folder for you once you run 'mvn install'" )
		} else{
			println( "🧹 Cleaning up unnecessary files" )
			if( fileExists( "effective-pom.xml" ) ){
				fileDelete( "effective-pom.xml" )
			}
			if( fileExists( "pom.xml" ) ){
				fileDelete( "pom.xml" )
			}
		}

		// Vite Setup?
		var vite = CLIRead( "Do you want to use Vite for your frontend build system? (y/n): " ).toLowerCase().booleanFormat();
		if( vite ){
			println( "🥊 Setting up Vite for your frontend build system" )
			// Copy the vite/.babelrc, vite/package.json, vite/vite.config.js to the root
			fileMove( "vite/.babelrc", ".babelrc" )
			fileMove( "vite/package.json", "package.json" )
			fileMove( "vite/vite.config.js", "vite.config.js" )
			// Copy and override resources/vite/layouts/Main.bxm -> /app/layouts/Main.bxm
			fileMove( "resources/vite/layouts/Main.bxm", "app/layouts/Main.bxm", true )
			fileMove( "resources/vite/assets", "resources/assets" )
			// Delete the vite directory
			directoryDelete( "resources/vite", true )
			println( "✅ Vite setup complete!" )
			println( "👉  You can run 'npm install' to install the dependencies" )
			println( "👉  You can run 'npm run dev' to start the development server" )
			println( "👉  You can run 'npm run build' to build the production assets" )
		} else {
			// Delete vite resources
			directoryDelete( "resources/vite", true )
		}

		// Remove the ignore array from box.json
		println( "🛁 Cleaning up your box.json" )
		result = systemExecute(
			name: "box",
			arguments: "package set ignore=[]",
			directory: static.projectRoot
		)

		// Delete this setup file
		println( "🥊  Your ColdBox BoxLang application is ready to roll!" )
		println( "👉  Run 'box server start' to launch the development server." )
		println( "👉  Run 'box coldbox help' to see a list of available commands from the ColdBox CLI" )
		println( "ℹ️. You can remove the [Setup.bx] file from your project now or keep it for future reference." )
		println( "🗳️  Happy coding!" )
	}

}