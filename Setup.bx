class{

	static {
		projectRoot = server.cli.executionPath
	}

	function main(){
		// Copy the .env.example to .env if it doesn't exist
		if( !fileExists( ".env" ) ){
			println( "🥊 Creating .env file from .env.example" )
			fileCopy( ".env.example", ".env" )
		} else{
			println( "⏭️  .env file already exists, skipping creation." )
		}

		// Copy the copilot file if it doesn't exist
		if( !directoryExists( ".github" ) ){
			println( "🥊 Creating .github directory" )
			directoryCreate( ".github" )
		}
		if( !fileExists( ".github/copilot-instructions.md" ) ){
			println( "🥊 Creating copilot file" )
			fileCopy( "resources/copilot-instructions.md", ".github/copilot-instructions.md" )
		} else{
			println( "⏭️  .github/copilot-instructions.md file already exists, skipping creation." )
		}

		// Maven setup
		// Ask the user if they want to use Maven for Java dependency management
		var maven = CLIRead( "🙋 Do you want to use Maven for any Java dependency management? (y/n): " ).toLowerCase().booleanFormat();
		if( maven ){
			println( "🥊 Setting up a [pom.xml] in your root for Java dependency management" )
			println( "👉  You can add your Java dependencies to the [dependencies] section of the pom.xml" )
			println( "👉  They will be automatically copied to the [runtime/lib] folder for you once you run 'mvn install'" )
		} else{
			println( "🧹 Cleaning up unnecessary files" )
			if( fileExists( "effective-pom.xml" ) ){
				fileDelete( "effective-pom.xml" )
			}
			if( fileExists( "pom.xml" ) ){
				fileDelete( "pom.xml" )
			}
		}

		// Is this a REST API only project?
		var apiOnly = CLIRead( "🙋 Is this a REST API only project? (y/n): " ).toLowerCase().booleanFormat();
		if( apiOnly ){
			println( "🥊 Setting up a REST API only ColdBox application" )
			println( "👉  You can always add views and layouts later if you change your mind" )

			// Router
			fileDelete( "app/config/Router.bx" )
			fileCopy( "resources/rest/Router.bx", "app/config/Router.bx" )
			// Tests
			directoryDelete( "tests/specs", true )
			directoryCopy( source: "resources/rest/specs", destination: "tests/specs", recurse: true, createPath: true )
			// Models
			directoryDelete( "app/models", true )
			directoryCopy( source: "resources/rest/models", destination: "app/models", recurse: true, createPath: true )
			// Handlers
			directoryDelete( "app/handlers", true )
			directoryCopy( source: "resources/rest/handlers", destination: "app/handlers", recurse: true, createPath: true )
			// Api Docs
			directoryCopy( source: "resources/rest/apidocs", destination: "resources/apidocs", recurse: true, createPath: true )
			directoryDelete( "resources/rest", true )

			// Install CommandBox Modules
			println( "🥊 Installing ColdBox API Production Modules: Security, Mementifier, Validation" )
			result = systemExecute(
				name: "box",
				arguments: "install cbsecurity,mementifier,cbvalidation",
				directory: static.projectRoot
			)
			println( result.output )

			println( "🥊 Installing ColdBox API Development Modules: route-visualizer,relax" )
			result = systemExecute(
				name: "box",
				arguments: "install route-visualizer,relax --saveDev",
				directory: static.projectRoot
			)
			println( result.output )

			println( "✅ REST API only setup complete!" )
		} else {
			directoryDelete( "resources/rest", true )
		}

		// Vite Setup, only if not api only
		if( !apiOnly ){
			var vite = CLIRead( "🙋 Do you want to use Vite for your frontend build system? (y/n): " ).toLowerCase().booleanFormat();
			if( vite ){
				println( "🥊 Setting up Vite for your frontend build system" )
				fileCopy( "resources/vite/.babelrc", ".babelrc" )
				fileCopy( "resources/vite/package.json", "package.json" )
				fileCopy( "resources/vite/vite.config.mjs", "vite.config.mjs" )
				fileDelete( "app/layouts/Main.bxm" )
				fileCopy( "resources/vite/layouts/Main.bxm", "app/layouts/Main.bxm" )
				fileCopy( "resources/vite/assets", "resources/assets" )
				println( "✅ Vite setup complete!" )
				println( "👉  You can run 'npm install' to install the dependencies" )
				println( "👉  You can run 'npm run dev' to start the development server" )
				println( "👉  You can run 'npm run build' to build the production assets" )
			} else {
				directoryDelete( "resources/vite", true )
			}
		}

		// Docker Setup?
		var docker = CLIRead( "🙋 Do you want to use Docker for containerization? (y/n): " ).toLowerCase().booleanFormat();
		if( docker ){
			println( "🥊 Setting up Docker for containerization" )
			directoryCreate( "docker", true, true )
			fileCopy( "resources/docker/Dockerfile", "docker/Dockerfile" )
			fileCopy( "resources/docker/docker-compose.yml", "docker/docker-compose.yml" )
			fileCopy( "resources/docker/.dockerignore", ".dockerignore" )
			println( "✅ Docker setup complete!" )
			println( "ℹ️. Your docker files are located in the [docker] directory" )
			println( "👉  You can run 'box run-script docker:build' to build your Docker image." )
			println( "👉  You can run 'box run-script docker:run' to run your Docker container." )
			println( "👉  You can run 'box run-script docker:bash' to go into the container shell." )
			println( "👉  You can run 'box run-script docker:stack' to startup the Docker Compose Stack" )
		} else {
			directoryDelete( "resources/docker", true )
		}

		// Dev Container
		var devcontainer = CLIRead( "🙋 Do you want to keep the Dev Container setup so you can code in GitHub (.devcontainer)? (y/n): " ).toLowerCase().booleanFormat();
		if( !devcontainer ){
			println( "🧹 Cleaning up unnecessary files" )
			directoryDelete( ".devcontainer", true )
		} else {
			println( "ℹ️. Your Dev Container files are located in the [.devcontainer] directory" )
			println( "👉  You can open this project in a container in VS Code by clicking the green button in the bottom left corner." )
			println( "👉  You can customize the container by modifying the [.devcontainer/devcontainer.json] and [.devcontainer/Dockerfile] files." )
		}

		// Remove the ignore array from box.json
		println( "🛁 Cleaning up your box.json" )
		result = systemExecute(
			name: "box",
			arguments: "package set ignore=[]",
			directory: static.projectRoot
		)

		// Delete this setup file
		println( "🥊  Your ColdBox BoxLang application is ready to roll!" )
		println( "👉  Run 'box server start' to launch the development server." )
		println( "👉  Run 'box coldbox help' to see a list of available commands from the ColdBox CLI" )
		println( "ℹ️. You can remove the [Setup.bx] file from your project now or keep it for future reference." )
		println( "🗳️  Happy coding!" )
	}

}